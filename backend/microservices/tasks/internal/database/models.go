// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package database

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
)

type TaskPriority string

const (
	TaskPriorityLow        TaskPriority = "low"
	TaskPriorityMedium     TaskPriority = "medium"
	TaskPriorityHigh       TaskPriority = "high"
	TaskPriorityReallyhigh TaskPriority = "really high"
)

func (e *TaskPriority) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TaskPriority(s)
	case string:
		*e = TaskPriority(s)
	default:
		return fmt.Errorf("unsupported scan type for TaskPriority: %T", src)
	}
	return nil
}

type NullTaskPriority struct {
	TaskPriority TaskPriority
	Valid        bool // Valid is true if TaskPriority is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTaskPriority) Scan(value interface{}) error {
	if value == nil {
		ns.TaskPriority, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TaskPriority.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTaskPriority) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TaskPriority), nil
}

type Project struct {
	ProjectID   string
	Title       string
	Description sql.NullString
	UserID      string
	CreatedAt   sql.NullTime
}

type ProjectTask struct {
	TaskID    string
	ProjectID string
}

type Task struct {
	TaskID      string
	Title       string
	Description sql.NullString
	Priority    TaskPriority
	UserID      string
	CreatedAt   sql.NullTime
	Deadline    sql.NullTime
}

type TaskStatus struct {
	TaskID       string
	TaskStatusID string
}

type TaskStatusType struct {
	TaskStatusTypesID string
	OwnerProjectID    string
	Type              string
}

type UsersProject struct {
	UserID    string
	ProjectID string
}

type UsersTask struct {
	UserID string
	TaskID string
}
