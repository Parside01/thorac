// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.11
// source: tasks.proto

package tasks

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Tasks_CreateProject_FullMethodName       = "/tasks.Tasks/CreateProject"
	Tasks_CreateTask_FullMethodName          = "/tasks.Tasks/CreateTask"
	Tasks_CreateNewTaskStatus_FullMethodName = "/tasks.Tasks/CreateNewTaskStatus"
	Tasks_AddTaskToProject_FullMethodName    = "/tasks.Tasks/AddTaskToProject"
	Tasks_SetTaskStatus_FullMethodName       = "/tasks.Tasks/SetTaskStatus"
	Tasks_DeleteTaskById_FullMethodName      = "/tasks.Tasks/DeleteTaskById"
	Tasks_UpdateTask_FullMethodName          = "/tasks.Tasks/UpdateTask"
	Tasks_GetTaskById_FullMethodName         = "/tasks.Tasks/GetTaskById"
	Tasks_GetProjectTasks_FullMethodName     = "/tasks.Tasks/GetProjectTasks"
	Tasks_GetTaskStatusById_FullMethodName   = "/tasks.Tasks/GetTaskStatusById"
	Tasks_GetTasksByStatus_FullMethodName    = "/tasks.Tasks/GetTasksByStatus"
	Tasks_GetTasksByPriority_FullMethodName  = "/tasks.Tasks/GetTasksByPriority"
	Tasks_GetTasksByUserId_FullMethodName    = "/tasks.Tasks/GetTasksByUserId"
	Tasks_GetTasksInProject_FullMethodName   = "/tasks.Tasks/GetTasksInProject"
)

// TasksClient is the client API for Tasks service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TasksClient interface {
	CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error)
	CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error)
	CreateNewTaskStatus(ctx context.Context, in *CreateNewTaskStatusRequest, opts ...grpc.CallOption) (*CreateNewTaskStatusResponse, error)
	AddTaskToProject(ctx context.Context, in *AddTaskToProjectRequest, opts ...grpc.CallOption) (*AddTaskToProjectResponse, error)
	SetTaskStatus(ctx context.Context, in *SetTaskStatusRequest, opts ...grpc.CallOption) (*SetTaskStatusResponse, error)
	DeleteTaskById(ctx context.Context, in *DeleteTaskByIdRequest, opts ...grpc.CallOption) (*DeleteTaskByIdResponse, error)
	UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*UpdateTaskResponse, error)
	GetTaskById(ctx context.Context, in *GetProjectTasksRequest, opts ...grpc.CallOption) (*Task, error)
	GetProjectTasks(ctx context.Context, in *GetProjectTasksRequest, opts ...grpc.CallOption) (*TaskList, error)
	GetTaskStatusById(ctx context.Context, in *GetTaskStatusByIdRequest, opts ...grpc.CallOption) (*GetTaskStatusByIdResponse, error)
	GetTasksByStatus(ctx context.Context, in *GetTasksByStatusRequest, opts ...grpc.CallOption) (*TaskList, error)
	GetTasksByPriority(ctx context.Context, in *GetTasksByPriorityRequest, opts ...grpc.CallOption) (*TaskList, error)
	GetTasksByUserId(ctx context.Context, in *GetTasksByUserIdRequest, opts ...grpc.CallOption) (*TaskList, error)
	GetTasksInProject(ctx context.Context, in *GetTasksInProjectRequest, opts ...grpc.CallOption) (*TaskList, error)
}

type tasksClient struct {
	cc grpc.ClientConnInterface
}

func NewTasksClient(cc grpc.ClientConnInterface) TasksClient {
	return &tasksClient{cc}
}

func (c *tasksClient) CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateProjectResponse)
	err := c.cc.Invoke(ctx, Tasks_CreateProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tasksClient) CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTaskResponse)
	err := c.cc.Invoke(ctx, Tasks_CreateTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tasksClient) CreateNewTaskStatus(ctx context.Context, in *CreateNewTaskStatusRequest, opts ...grpc.CallOption) (*CreateNewTaskStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateNewTaskStatusResponse)
	err := c.cc.Invoke(ctx, Tasks_CreateNewTaskStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tasksClient) AddTaskToProject(ctx context.Context, in *AddTaskToProjectRequest, opts ...grpc.CallOption) (*AddTaskToProjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddTaskToProjectResponse)
	err := c.cc.Invoke(ctx, Tasks_AddTaskToProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tasksClient) SetTaskStatus(ctx context.Context, in *SetTaskStatusRequest, opts ...grpc.CallOption) (*SetTaskStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetTaskStatusResponse)
	err := c.cc.Invoke(ctx, Tasks_SetTaskStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tasksClient) DeleteTaskById(ctx context.Context, in *DeleteTaskByIdRequest, opts ...grpc.CallOption) (*DeleteTaskByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTaskByIdResponse)
	err := c.cc.Invoke(ctx, Tasks_DeleteTaskById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tasksClient) UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*UpdateTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTaskResponse)
	err := c.cc.Invoke(ctx, Tasks_UpdateTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tasksClient) GetTaskById(ctx context.Context, in *GetProjectTasksRequest, opts ...grpc.CallOption) (*Task, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Task)
	err := c.cc.Invoke(ctx, Tasks_GetTaskById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tasksClient) GetProjectTasks(ctx context.Context, in *GetProjectTasksRequest, opts ...grpc.CallOption) (*TaskList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskList)
	err := c.cc.Invoke(ctx, Tasks_GetProjectTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tasksClient) GetTaskStatusById(ctx context.Context, in *GetTaskStatusByIdRequest, opts ...grpc.CallOption) (*GetTaskStatusByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTaskStatusByIdResponse)
	err := c.cc.Invoke(ctx, Tasks_GetTaskStatusById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tasksClient) GetTasksByStatus(ctx context.Context, in *GetTasksByStatusRequest, opts ...grpc.CallOption) (*TaskList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskList)
	err := c.cc.Invoke(ctx, Tasks_GetTasksByStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tasksClient) GetTasksByPriority(ctx context.Context, in *GetTasksByPriorityRequest, opts ...grpc.CallOption) (*TaskList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskList)
	err := c.cc.Invoke(ctx, Tasks_GetTasksByPriority_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tasksClient) GetTasksByUserId(ctx context.Context, in *GetTasksByUserIdRequest, opts ...grpc.CallOption) (*TaskList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskList)
	err := c.cc.Invoke(ctx, Tasks_GetTasksByUserId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tasksClient) GetTasksInProject(ctx context.Context, in *GetTasksInProjectRequest, opts ...grpc.CallOption) (*TaskList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskList)
	err := c.cc.Invoke(ctx, Tasks_GetTasksInProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TasksServer is the server API for Tasks service.
// All implementations must embed UnimplementedTasksServer
// for forward compatibility.
type TasksServer interface {
	CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error)
	CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskResponse, error)
	CreateNewTaskStatus(context.Context, *CreateNewTaskStatusRequest) (*CreateNewTaskStatusResponse, error)
	AddTaskToProject(context.Context, *AddTaskToProjectRequest) (*AddTaskToProjectResponse, error)
	SetTaskStatus(context.Context, *SetTaskStatusRequest) (*SetTaskStatusResponse, error)
	DeleteTaskById(context.Context, *DeleteTaskByIdRequest) (*DeleteTaskByIdResponse, error)
	UpdateTask(context.Context, *UpdateTaskRequest) (*UpdateTaskResponse, error)
	GetTaskById(context.Context, *GetProjectTasksRequest) (*Task, error)
	GetProjectTasks(context.Context, *GetProjectTasksRequest) (*TaskList, error)
	GetTaskStatusById(context.Context, *GetTaskStatusByIdRequest) (*GetTaskStatusByIdResponse, error)
	GetTasksByStatus(context.Context, *GetTasksByStatusRequest) (*TaskList, error)
	GetTasksByPriority(context.Context, *GetTasksByPriorityRequest) (*TaskList, error)
	GetTasksByUserId(context.Context, *GetTasksByUserIdRequest) (*TaskList, error)
	GetTasksInProject(context.Context, *GetTasksInProjectRequest) (*TaskList, error)
	mustEmbedUnimplementedTasksServer()
}

// UnimplementedTasksServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTasksServer struct{}

func (UnimplementedTasksServer) CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (UnimplementedTasksServer) CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (UnimplementedTasksServer) CreateNewTaskStatus(context.Context, *CreateNewTaskStatusRequest) (*CreateNewTaskStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewTaskStatus not implemented")
}
func (UnimplementedTasksServer) AddTaskToProject(context.Context, *AddTaskToProjectRequest) (*AddTaskToProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTaskToProject not implemented")
}
func (UnimplementedTasksServer) SetTaskStatus(context.Context, *SetTaskStatusRequest) (*SetTaskStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTaskStatus not implemented")
}
func (UnimplementedTasksServer) DeleteTaskById(context.Context, *DeleteTaskByIdRequest) (*DeleteTaskByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTaskById not implemented")
}
func (UnimplementedTasksServer) UpdateTask(context.Context, *UpdateTaskRequest) (*UpdateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTask not implemented")
}
func (UnimplementedTasksServer) GetTaskById(context.Context, *GetProjectTasksRequest) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskById not implemented")
}
func (UnimplementedTasksServer) GetProjectTasks(context.Context, *GetProjectTasksRequest) (*TaskList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectTasks not implemented")
}
func (UnimplementedTasksServer) GetTaskStatusById(context.Context, *GetTaskStatusByIdRequest) (*GetTaskStatusByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskStatusById not implemented")
}
func (UnimplementedTasksServer) GetTasksByStatus(context.Context, *GetTasksByStatusRequest) (*TaskList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTasksByStatus not implemented")
}
func (UnimplementedTasksServer) GetTasksByPriority(context.Context, *GetTasksByPriorityRequest) (*TaskList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTasksByPriority not implemented")
}
func (UnimplementedTasksServer) GetTasksByUserId(context.Context, *GetTasksByUserIdRequest) (*TaskList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTasksByUserId not implemented")
}
func (UnimplementedTasksServer) GetTasksInProject(context.Context, *GetTasksInProjectRequest) (*TaskList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTasksInProject not implemented")
}
func (UnimplementedTasksServer) mustEmbedUnimplementedTasksServer() {}
func (UnimplementedTasksServer) testEmbeddedByValue()               {}

// UnsafeTasksServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TasksServer will
// result in compilation errors.
type UnsafeTasksServer interface {
	mustEmbedUnimplementedTasksServer()
}

func RegisterTasksServer(s grpc.ServiceRegistrar, srv TasksServer) {
	// If the following call pancis, it indicates UnimplementedTasksServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Tasks_ServiceDesc, srv)
}

func _Tasks_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tasks_CreateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksServer).CreateProject(ctx, req.(*CreateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tasks_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tasks_CreateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksServer).CreateTask(ctx, req.(*CreateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tasks_CreateNewTaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNewTaskStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksServer).CreateNewTaskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tasks_CreateNewTaskStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksServer).CreateNewTaskStatus(ctx, req.(*CreateNewTaskStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tasks_AddTaskToProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTaskToProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksServer).AddTaskToProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tasks_AddTaskToProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksServer).AddTaskToProject(ctx, req.(*AddTaskToProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tasks_SetTaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTaskStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksServer).SetTaskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tasks_SetTaskStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksServer).SetTaskStatus(ctx, req.(*SetTaskStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tasks_DeleteTaskById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTaskByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksServer).DeleteTaskById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tasks_DeleteTaskById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksServer).DeleteTaskById(ctx, req.(*DeleteTaskByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tasks_UpdateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksServer).UpdateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tasks_UpdateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksServer).UpdateTask(ctx, req.(*UpdateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tasks_GetTaskById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksServer).GetTaskById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tasks_GetTaskById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksServer).GetTaskById(ctx, req.(*GetProjectTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tasks_GetProjectTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksServer).GetProjectTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tasks_GetProjectTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksServer).GetProjectTasks(ctx, req.(*GetProjectTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tasks_GetTaskStatusById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskStatusByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksServer).GetTaskStatusById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tasks_GetTaskStatusById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksServer).GetTaskStatusById(ctx, req.(*GetTaskStatusByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tasks_GetTasksByStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTasksByStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksServer).GetTasksByStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tasks_GetTasksByStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksServer).GetTasksByStatus(ctx, req.(*GetTasksByStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tasks_GetTasksByPriority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTasksByPriorityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksServer).GetTasksByPriority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tasks_GetTasksByPriority_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksServer).GetTasksByPriority(ctx, req.(*GetTasksByPriorityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tasks_GetTasksByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTasksByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksServer).GetTasksByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tasks_GetTasksByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksServer).GetTasksByUserId(ctx, req.(*GetTasksByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tasks_GetTasksInProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTasksInProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksServer).GetTasksInProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tasks_GetTasksInProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksServer).GetTasksInProject(ctx, req.(*GetTasksInProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Tasks_ServiceDesc is the grpc.ServiceDesc for Tasks service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tasks_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tasks.Tasks",
	HandlerType: (*TasksServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProject",
			Handler:    _Tasks_CreateProject_Handler,
		},
		{
			MethodName: "CreateTask",
			Handler:    _Tasks_CreateTask_Handler,
		},
		{
			MethodName: "CreateNewTaskStatus",
			Handler:    _Tasks_CreateNewTaskStatus_Handler,
		},
		{
			MethodName: "AddTaskToProject",
			Handler:    _Tasks_AddTaskToProject_Handler,
		},
		{
			MethodName: "SetTaskStatus",
			Handler:    _Tasks_SetTaskStatus_Handler,
		},
		{
			MethodName: "DeleteTaskById",
			Handler:    _Tasks_DeleteTaskById_Handler,
		},
		{
			MethodName: "UpdateTask",
			Handler:    _Tasks_UpdateTask_Handler,
		},
		{
			MethodName: "GetTaskById",
			Handler:    _Tasks_GetTaskById_Handler,
		},
		{
			MethodName: "GetProjectTasks",
			Handler:    _Tasks_GetProjectTasks_Handler,
		},
		{
			MethodName: "GetTaskStatusById",
			Handler:    _Tasks_GetTaskStatusById_Handler,
		},
		{
			MethodName: "GetTasksByStatus",
			Handler:    _Tasks_GetTasksByStatus_Handler,
		},
		{
			MethodName: "GetTasksByPriority",
			Handler:    _Tasks_GetTasksByPriority_Handler,
		},
		{
			MethodName: "GetTasksByUserId",
			Handler:    _Tasks_GetTasksByUserId_Handler,
		},
		{
			MethodName: "GetTasksInProject",
			Handler:    _Tasks_GetTasksInProject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tasks.proto",
}
