// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.11
// source: store.proto

package store

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StoreService_RemoveFile_FullMethodName = "/store.StoreService/RemoveFile"
	StoreService_GetFile_FullMethodName    = "/store.StoreService/GetFile"
)

// StoreServiceClient is the client API for StoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StoreServiceClient interface {
	RemoveFile(ctx context.Context, in *RemoveFileDTO, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RemoveFileRes], error)
	GetFile(ctx context.Context, in *GetFileDTO, opts ...grpc.CallOption) (grpc.ServerStreamingClient[File], error)
}

type storeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStoreServiceClient(cc grpc.ClientConnInterface) StoreServiceClient {
	return &storeServiceClient{cc}
}

func (c *storeServiceClient) RemoveFile(ctx context.Context, in *RemoveFileDTO, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RemoveFileRes], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StoreService_ServiceDesc.Streams[0], StoreService_RemoveFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RemoveFileDTO, RemoveFileRes]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StoreService_RemoveFileClient = grpc.ServerStreamingClient[RemoveFileRes]

func (c *storeServiceClient) GetFile(ctx context.Context, in *GetFileDTO, opts ...grpc.CallOption) (grpc.ServerStreamingClient[File], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StoreService_ServiceDesc.Streams[1], StoreService_GetFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetFileDTO, File]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StoreService_GetFileClient = grpc.ServerStreamingClient[File]

// StoreServiceServer is the server API for StoreService service.
// All implementations must embed UnimplementedStoreServiceServer
// for forward compatibility.
type StoreServiceServer interface {
	RemoveFile(*RemoveFileDTO, grpc.ServerStreamingServer[RemoveFileRes]) error
	GetFile(*GetFileDTO, grpc.ServerStreamingServer[File]) error
	mustEmbedUnimplementedStoreServiceServer()
}

// UnimplementedStoreServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStoreServiceServer struct{}

func (UnimplementedStoreServiceServer) RemoveFile(*RemoveFileDTO, grpc.ServerStreamingServer[RemoveFileRes]) error {
	return status.Errorf(codes.Unimplemented, "method RemoveFile not implemented")
}
func (UnimplementedStoreServiceServer) GetFile(*GetFileDTO, grpc.ServerStreamingServer[File]) error {
	return status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}
func (UnimplementedStoreServiceServer) mustEmbedUnimplementedStoreServiceServer() {}
func (UnimplementedStoreServiceServer) testEmbeddedByValue()                      {}

// UnsafeStoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StoreServiceServer will
// result in compilation errors.
type UnsafeStoreServiceServer interface {
	mustEmbedUnimplementedStoreServiceServer()
}

func RegisterStoreServiceServer(s grpc.ServiceRegistrar, srv StoreServiceServer) {
	// If the following call pancis, it indicates UnimplementedStoreServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StoreService_ServiceDesc, srv)
}

func _StoreService_RemoveFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RemoveFileDTO)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StoreServiceServer).RemoveFile(m, &grpc.GenericServerStream[RemoveFileDTO, RemoveFileRes]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StoreService_RemoveFileServer = grpc.ServerStreamingServer[RemoveFileRes]

func _StoreService_GetFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetFileDTO)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StoreServiceServer).GetFile(m, &grpc.GenericServerStream[GetFileDTO, File]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StoreService_GetFileServer = grpc.ServerStreamingServer[File]

// StoreService_ServiceDesc is the grpc.ServiceDesc for StoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "store.StoreService",
	HandlerType: (*StoreServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RemoveFile",
			Handler:       _StoreService_RemoveFile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetFile",
			Handler:       _StoreService_GetFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "store.proto",
}
