// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.27.3
// source: tasks.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "tasks";

export interface CreateProjectRequest {
  user_id: string;
  title: string;
  description: string;
}

export interface CreateProjectResponse {
  user_id: string;
  project_id: string;
  title: string;
  description: string;
  created_at: string;
}

export interface CreateTaskRequest {
  user_id: string;
  title: string;
  description: string;
  priority: string;
  deadline: string;
}

export interface CreateTaskResponse {
  user_id: string;
  task_id: string;
  title: string;
  description: string;
  priority: string;
  created_at: string;
  deadline: string;
}

export interface AddTaskToProjectRequest {
  user_id: string;
  project_id: string;
  task_id: string;
}

export interface AddTaskToProjectResponse {
}

export interface CreateNewTaskStatusRequest {
  user_id: string;
  project_id: string;
  status_type: string;
}

export interface CreateNewTaskStatusResponse {
  status_id: string;
  owner_project_id: string;
  status_type: string;
}

export interface SetTaskStatusRequest {
  user_id: string;
  task_id: string;
  status_id: string;
}

export interface SetTaskStatusResponse {
}

export interface Task {
  user_id: string;
  task_id: string;
  title: string;
  description: string;
  priority: string;
  created_at: string;
  deadline: string;
}

export interface TaskList {
  tasks: Task[];
}

export interface GetProjectTasksRequest {
  user_id: string;
  project_id: string;
}

export interface GetTaskByIdRequest {
  user_id: string;
  task_id: string;
}

export interface DeleteTaskByIdRequest {
  user_id: string;
  task_id: string;
}

export interface DeleteTaskByIdResponse {
}

export interface UpdateTaskRequest {
  user_id: string;
  task_id: string;
  title: string;
  description: string;
  priority: string;
  deadline: string;
}

export interface UpdateTaskResponse {
}

export interface GetTaskStatusByIdRequest {
  user_id: string;
  task_id: string;
}

export interface GetTaskStatusByIdResponse {
  status_type: string;
}

export interface GetTasksByStatusRequest {
  user_id: string;
  project_id: string;
  status_id: string;
}

export interface GetTasksByPriorityRequest {
  user_id: string;
  project_id: string;
  priority: string;
}

export interface GetTasksByUserIdRequest {
  user_id: string;
}

export interface GetTasksInProjectRequest {
  user_id: string;
  project_id: string;
}

export const TASKS_PACKAGE_NAME = "tasks";

export interface TasksClient {
  createProject(request: CreateProjectRequest): Observable<CreateProjectResponse>;

  createTask(request: CreateTaskRequest): Observable<CreateTaskResponse>;

  createNewTaskStatus(request: CreateNewTaskStatusRequest): Observable<CreateNewTaskStatusResponse>;

  addTaskToProject(request: AddTaskToProjectRequest): Observable<AddTaskToProjectResponse>;

  setTaskStatus(request: SetTaskStatusRequest): Observable<SetTaskStatusResponse>;

  deleteTaskById(request: DeleteTaskByIdRequest): Observable<DeleteTaskByIdResponse>;

  updateTask(request: UpdateTaskRequest): Observable<UpdateTaskResponse>;

  getTaskById(request: GetProjectTasksRequest): Observable<Task>;

  getProjectTasks(request: GetProjectTasksRequest): Observable<TaskList>;

  getTaskStatusById(request: GetTaskStatusByIdRequest): Observable<GetTaskStatusByIdResponse>;

  getTasksByStatus(request: GetTasksByStatusRequest): Observable<TaskList>;

  getTasksByPriority(request: GetTasksByPriorityRequest): Observable<TaskList>;

  getTasksByUserId(request: GetTasksByUserIdRequest): Observable<TaskList>;

  getTasksInProject(request: GetTasksInProjectRequest): Observable<TaskList>;
}

export interface TasksController {
  createProject(request: CreateProjectRequest): Observable<CreateProjectResponse>;

  createTask(request: CreateTaskRequest): Observable<CreateTaskResponse>;

  createNewTaskStatus(request: CreateNewTaskStatusRequest): Observable<CreateNewTaskStatusResponse>;

  addTaskToProject(request: AddTaskToProjectRequest): Observable<AddTaskToProjectResponse>;

  setTaskStatus(request: SetTaskStatusRequest): Observable<SetTaskStatusResponse>;

  deleteTaskById(request: DeleteTaskByIdRequest): Observable<DeleteTaskByIdResponse>;

  updateTask(request: UpdateTaskRequest): Observable<UpdateTaskResponse>;

  getTaskById(request: GetProjectTasksRequest): Observable<Task>;

  getProjectTasks(request: GetProjectTasksRequest): Observable<TaskList>;

  getTaskStatusById(request: GetTaskStatusByIdRequest): Observable<GetTaskStatusByIdResponse>;

  getTasksByStatus(request: GetTasksByStatusRequest): Observable<TaskList>;

  getTasksByPriority(request: GetTasksByPriorityRequest): Observable<TaskList>;

  getTasksByUserId(request: GetTasksByUserIdRequest): Observable<TaskList>;

  getTasksInProject(request: GetTasksInProjectRequest): Observable<TaskList>;
}

export function TasksControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "createProject",
      "createTask",
      "createNewTaskStatus",
      "addTaskToProject",
      "setTaskStatus",
      "deleteTaskById",
      "updateTask",
      "getTaskById",
      "getProjectTasks",
      "getTaskStatusById",
      "getTasksByStatus",
      "getTasksByPriority",
      "getTasksByUserId",
      "getTasksInProject",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("Tasks", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("Tasks", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const TASKS_SERVICE_NAME = "Tasks";
