// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package database

import (
	"context"
	"database/sql"
)

const createNewTaskStatus = `-- name: CreateNewTaskStatus :one
INSERT INTO task_status_types (type)
VALUES ($1)
RETURNING task_status_id, type
`

func (q *Queries) CreateNewTaskStatus(ctx context.Context, type_ string) (TaskStatusType, error) {
	row := q.db.QueryRowContext(ctx, createNewTaskStatus, type_)
	var i TaskStatusType
	err := row.Scan(&i.TaskStatusID, &i.Type)
	return i, err
}

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (title, description, priority, author_name, created_at, deadline)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING task_id, title, description, priority, author_name, created_at, deadline
`

type CreateTaskParams struct {
	Title       string
	Description sql.NullString
	Priority    TaskPriority
	AuthorName  string
	CreatedAt   sql.NullTime
	Deadline    sql.NullTime
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask,
		arg.Title,
		arg.Description,
		arg.Priority,
		arg.AuthorName,
		arg.CreatedAt,
		arg.Deadline,
	)
	var i Task
	err := row.Scan(
		&i.TaskID,
		&i.Title,
		&i.Description,
		&i.Priority,
		&i.AuthorName,
		&i.CreatedAt,
		&i.Deadline,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE
FROM tasks
WHERE task_id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, taskID int64) error {
	_, err := q.db.ExecContext(ctx, deleteTask, taskID)
	return err
}

const getAllTaskStatuses = `-- name: GetAllTaskStatuses :many
SELECT task_status_id, type
FROM task_status_types
`

func (q *Queries) GetAllTaskStatuses(ctx context.Context) ([]TaskStatusType, error) {
	rows, err := q.db.QueryContext(ctx, getAllTaskStatuses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TaskStatusType
	for rows.Next() {
		var i TaskStatusType
		if err := rows.Scan(&i.TaskStatusID, &i.Type); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllTasks = `-- name: GetAllTasks :many
SELECT task_id, title, description, priority, author_name, created_at, deadline
FROM tasks
`

func (q *Queries) GetAllTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getAllTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.TaskID,
			&i.Title,
			&i.Description,
			&i.Priority,
			&i.AuthorName,
			&i.CreatedAt,
			&i.Deadline,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTaskById = `-- name: GetTaskById :one
SELECT task_id, title, description, priority, author_name, created_at, deadline
FROM tasks
WHERE task_id = $1
`

func (q *Queries) GetTaskById(ctx context.Context, taskID int64) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTaskById, taskID)
	var i Task
	err := row.Scan(
		&i.TaskID,
		&i.Title,
		&i.Description,
		&i.Priority,
		&i.AuthorName,
		&i.CreatedAt,
		&i.Deadline,
	)
	return i, err
}

const getTaskStatusByTaskId = `-- name: GetTaskStatusByTaskId :one
SELECT t.type
FROM task_statuses AS ts
         JOIN task_status_types AS t ON ts.task_status_id = t.task_status_id
WHERE ts.task_id = $1
`

func (q *Queries) GetTaskStatusByTaskId(ctx context.Context, taskID int64) (string, error) {
	row := q.db.QueryRowContext(ctx, getTaskStatusByTaskId, taskID)
	var type_ string
	err := row.Scan(&type_)
	return type_, err
}

const getTasksByAuthor = `-- name: GetTasksByAuthor :many
SELECT task_id, title, description, priority, author_name, created_at, deadline FROM tasks
WHERE author_name = $1
`

func (q *Queries) GetTasksByAuthor(ctx context.Context, authorName string) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getTasksByAuthor, authorName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.TaskID,
			&i.Title,
			&i.Description,
			&i.Priority,
			&i.AuthorName,
			&i.CreatedAt,
			&i.Deadline,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTasksByDeadline = `-- name: GetTasksByDeadline :many
SELECT task_id, title, description, priority, author_name, created_at, deadline FROM tasks
WHERE deadline <= $1
`

func (q *Queries) GetTasksByDeadline(ctx context.Context, deadline sql.NullTime) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getTasksByDeadline, deadline)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.TaskID,
			&i.Title,
			&i.Description,
			&i.Priority,
			&i.AuthorName,
			&i.CreatedAt,
			&i.Deadline,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTasksByPriority = `-- name: GetTasksByPriority :many
SELECT task_id, title, description, priority, author_name, created_at, deadline FROM tasks
WHERE priority = $1
`

func (q *Queries) GetTasksByPriority(ctx context.Context, priority TaskPriority) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getTasksByPriority, priority)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.TaskID,
			&i.Title,
			&i.Description,
			&i.Priority,
			&i.AuthorName,
			&i.CreatedAt,
			&i.Deadline,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTasksByStatus = `-- name: GetTasksByStatus :many
SELECT t.task_id, t.title, t.description, t.priority, t.author_name, t.created_at, t.deadline
FROM tasks AS t
         JOIN task_statuses AS ts ON t.task_id = ts.task_id
         JOIN task_status_types AS tst ON ts.task_status_id = tst.task_status_id
WHERE tst.type = $1
`

func (q *Queries) GetTasksByStatus(ctx context.Context, type_ string) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getTasksByStatus, type_)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.TaskID,
			&i.Title,
			&i.Description,
			&i.Priority,
			&i.AuthorName,
			&i.CreatedAt,
			&i.Deadline,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setTaskDeadline = `-- name: SetTaskDeadline :exec
UPDATE tasks
SET deadline = $2
WHERE task_id = $1
`

type SetTaskDeadlineParams struct {
	TaskID   int64
	Deadline sql.NullTime
}

func (q *Queries) SetTaskDeadline(ctx context.Context, arg SetTaskDeadlineParams) error {
	_, err := q.db.ExecContext(ctx, setTaskDeadline, arg.TaskID, arg.Deadline)
	return err
}

const setTaskStatus = `-- name: SetTaskStatus :exec
UPDATE task_statuses
SET task_status_id = (SELECT task_status_id FROM task_status_types WHERE $2 = type)
WHERE task_id = $1
`

type SetTaskStatusParams struct {
	TaskID int64
	Type   string
}

func (q *Queries) SetTaskStatus(ctx context.Context, arg SetTaskStatusParams) error {
	_, err := q.db.ExecContext(ctx, setTaskStatus, arg.TaskID, arg.Type)
	return err
}

const updateTask = `-- name: UpdateTask :exec
UPDATE tasks
SET title       = $2,
    description = $3,
    priority    = $4,
    author_name = $5,
    created_at  = $6,
    deadline    = $7
WHERE task_id = $1
`

type UpdateTaskParams struct {
	TaskID      int64
	Title       string
	Description sql.NullString
	Priority    TaskPriority
	AuthorName  string
	CreatedAt   sql.NullTime
	Deadline    sql.NullTime
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) error {
	_, err := q.db.ExecContext(ctx, updateTask,
		arg.TaskID,
		arg.Title,
		arg.Description,
		arg.Priority,
		arg.AuthorName,
		arg.CreatedAt,
		arg.Deadline,
	)
	return err
}
